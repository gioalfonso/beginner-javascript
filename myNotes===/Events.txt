every elements has an event when it is being interacted.
we use event listener to listen for the events.

el.addEventListener('click', callback func here)
                   event    callback function usually anonymous
 - will take to arguments usually, sometimes 3
 - you can also use a named function outside and pass it in as reference
        
        function handleClick() {

        }
    **naming function handle you can do to 
    remind you its a callback or specific function
    that gets passed in to event handler.

- using outside function makes it reusable to different event listener

===REMOVE EVENT LISTENER========================

el.removeEventListener('click', handleClick);
                  what event to stop,   function you wish to stop

** If you need to remove an event listener
   - you must use a named function
   - or you can use arrow function stored in variable
   - Anonymous function cannot be removed.


OTHER EVENTS and CREATE CUSTOM EVENTS

Listening to multiple events


===EVENTS - TARGETS, BUBBLING, PROPAGATION, CAPTURE=======


function handleBuyButtonClick(event) {
  console.log(parseFloat(event.target.dataset.price))
  
  // or you can do this way also
  const button = event.target;
  console.log(button.textContent);

  // or
  console.log(event.currentTarget);
}

note:
    console.log(event.currentTarget);
    event.target - is the thing that actually got clicked
    event.current -  is the thing that fired the event listener
  ** in most cases you probably wanna reach for event.currentTarget


note: these turn strings into integers
    parseFloat() -- keeps decimals
    parseInt() -- doesnt

PROPAGATION - event bubbles up 

STOP PROPAGATION
event.stopPropagation();

LISTENING ON WINDOW
window.addEventListener('click', function(event) {
  console.log('You Clicked The Window');
  console.log(event.target)
});

if you pass in the "event" anytime you click on window, it will show 
you what actually is you're clicking on.

** CAPTURE **

capture phase listens from top on the way down (to the target element)
bubble phase listens bottom on the  way up

// see video @14:00

different types on evenlistener 
'click'
'mouseenter'
'mousemove'
... and mouseenter

"this" keyword 
  - a special word in javascipt, reserved word
  - is always going to be equal to whatever is to the left of the dot.
    in the case below (photoEl)

photoEl.addEventListener('mouseenter', function(e) {
  console.log(e.currentTarget);
  console.log(this);
});


=== Events - Prevent Default and Form Events===============

event.preventDefault();
 - this will prevent the default behavior of an element
 from happening.

listening for SUBMIT event

const signupForm = document.querySelector('[name="signup"]');
                                          \-attribute selector

* tips
  if your console.log keeps clearing or going away
  click the cog wheel (setting) on inspector and 
  check on "Preserve log upon navigation"

OTHER TYPES OF EVENTS w FORM INPUT
'click'
'keyup'
'keydown'
'focus'
'blur'

===Events - Accesiblity Gotchas and Keyboard=========

*Things that are not keyboard accessible should not
 have clicks registered on them.

 website: www.keycode.info


